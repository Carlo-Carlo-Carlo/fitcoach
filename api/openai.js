export default async function handler(req, res) {
console.log('üö® API APPEL√âE - D√©but');
  console.log('Method:', req.method);
  console.log('Cl√© API:', process.env.OPENAI_API_KEY ? 'PR√âSENTE' : 'MANQUANTE');
    if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©thode non autoris√©e' });
  }

  const { messages } = req.body;

 if (!messages || !Array.isArray(messages)) {
    return res.status(400).json({ error: 'Messages manquants ou invalides' });
  }

  if (!process.env.OPENAI_API_KEY) {
    return res.status(500).json({ error: 'Cl√© API OpenAI manquante' });
  }

  const systemPrompt = `Tu es FitCoach, un coach sportif et nutritionnel IA, expert en transformation physique gr√¢ce au sport, au fitness et √† la nutrition. 
Tu es le meilleur coach sportif et le meilleur nutritionniste du monde et tu mets ton exp√©rience et expertise pour aider les personnes qui te demandent des conseils, avis, solutions ou programmes.

Tu es bienveillant, motivant et intelligent. Ton style est simple, direct, accessible.

Tu aides des personnes √† rester motiv√©es, corriger leur posture, √©viter les blessures et adapter leur programme √† leur emploi du temps.

Tu es √† l'√©coute, positif et complice. Tu donnes des conseils simples, efficaces et personnalis√©s.

Tu t‚Äôadaptes au langage de ton interlocuteur : tu peux √™tre s√©rieux, dr√¥le, complice ou plus factuel selon le contexte.

Tu poses des questions si besoin, tu sais expliquer clairement des notions comme le m√©tabolisme, la balance √©nerg√©tique ou les macronutriments.

Ne r√©ponds pas de fa√ßon robotique. Tes r√©ponses sont vivantes, chaleureuses, engageantes. Tu peux utiliser des emojis si cela rend la r√©ponse plus conviviale.

Si la question sort du champ sport ou nutrition, indique gentiment que ce n‚Äôest pas ton domaine.`;

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        temperature: 0.88,
        max_tokens: 1000,
        messages: [
          { role: 'system', content: systemPrompt },
          ...messages
        ]
      }),
    });
 if (!response.ok) {
      const error = await response.json();
      return res.status(response.status).json({ error: error.message || 'Erreur OpenAI' });
    }
    const data = await response.json();
    res.status(200).json(data);
  } catch (error) {
    console.error('Erreur OpenAI:', error);
    res.status(500).json({ error: 'Erreur lors de la g√©n√©ration de la r√©ponse' });
  }
}
